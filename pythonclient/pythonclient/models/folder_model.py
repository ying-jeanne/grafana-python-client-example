# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pythonclient.configuration import Configuration


class FolderModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_admin': 'bool',
        'can_delete': 'bool',
        'can_edit': 'bool',
        'can_save': 'bool',
        'created': 'datetime',
        'created_by': 'str',
        'has_acl': 'bool',
        'id': 'int',
        'title': 'str',
        'uid': 'str',
        'updated': 'datetime',
        'updated_by': 'str',
        'url': 'str',
        'version': 'int'
    }

    attribute_map = {
        'can_admin': 'canAdmin',
        'can_delete': 'canDelete',
        'can_edit': 'canEdit',
        'can_save': 'canSave',
        'created': 'created',
        'created_by': 'createdBy',
        'has_acl': 'hasAcl',
        'id': 'id',
        'title': 'title',
        'uid': 'uid',
        'updated': 'updated',
        'updated_by': 'updatedBy',
        'url': 'url',
        'version': 'version'
    }

    def __init__(self, can_admin=None, can_delete=None, can_edit=None, can_save=None, created=None, created_by=None, has_acl=None, id=None, title=None, uid=None, updated=None, updated_by=None, url=None, version=None, _configuration=None):  # noqa: E501
        """FolderModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._can_admin = None
        self._can_delete = None
        self._can_edit = None
        self._can_save = None
        self._created = None
        self._created_by = None
        self._has_acl = None
        self._id = None
        self._title = None
        self._uid = None
        self._updated = None
        self._updated_by = None
        self._url = None
        self._version = None
        self.discriminator = None

        if can_admin is not None:
            self.can_admin = can_admin
        if can_delete is not None:
            self.can_delete = can_delete
        if can_edit is not None:
            self.can_edit = can_edit
        if can_save is not None:
            self.can_save = can_save
        if created is not None:
            self.created = created
        if created_by is not None:
            self.created_by = created_by
        if has_acl is not None:
            self.has_acl = has_acl
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if uid is not None:
            self.uid = uid
        if updated is not None:
            self.updated = updated
        if updated_by is not None:
            self.updated_by = updated_by
        if url is not None:
            self.url = url
        if version is not None:
            self.version = version

    @property
    def can_admin(self):
        """Gets the can_admin of this FolderModel.  # noqa: E501


        :return: The can_admin of this FolderModel.  # noqa: E501
        :rtype: bool
        """
        return self._can_admin

    @can_admin.setter
    def can_admin(self, can_admin):
        """Sets the can_admin of this FolderModel.


        :param can_admin: The can_admin of this FolderModel.  # noqa: E501
        :type: bool
        """

        self._can_admin = can_admin

    @property
    def can_delete(self):
        """Gets the can_delete of this FolderModel.  # noqa: E501


        :return: The can_delete of this FolderModel.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this FolderModel.


        :param can_delete: The can_delete of this FolderModel.  # noqa: E501
        :type: bool
        """

        self._can_delete = can_delete

    @property
    def can_edit(self):
        """Gets the can_edit of this FolderModel.  # noqa: E501


        :return: The can_edit of this FolderModel.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this FolderModel.


        :param can_edit: The can_edit of this FolderModel.  # noqa: E501
        :type: bool
        """

        self._can_edit = can_edit

    @property
    def can_save(self):
        """Gets the can_save of this FolderModel.  # noqa: E501


        :return: The can_save of this FolderModel.  # noqa: E501
        :rtype: bool
        """
        return self._can_save

    @can_save.setter
    def can_save(self, can_save):
        """Sets the can_save of this FolderModel.


        :param can_save: The can_save of this FolderModel.  # noqa: E501
        :type: bool
        """

        self._can_save = can_save

    @property
    def created(self):
        """Gets the created of this FolderModel.  # noqa: E501


        :return: The created of this FolderModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this FolderModel.


        :param created: The created of this FolderModel.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this FolderModel.  # noqa: E501


        :return: The created_by of this FolderModel.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this FolderModel.


        :param created_by: The created_by of this FolderModel.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def has_acl(self):
        """Gets the has_acl of this FolderModel.  # noqa: E501


        :return: The has_acl of this FolderModel.  # noqa: E501
        :rtype: bool
        """
        return self._has_acl

    @has_acl.setter
    def has_acl(self, has_acl):
        """Sets the has_acl of this FolderModel.


        :param has_acl: The has_acl of this FolderModel.  # noqa: E501
        :type: bool
        """

        self._has_acl = has_acl

    @property
    def id(self):
        """Gets the id of this FolderModel.  # noqa: E501


        :return: The id of this FolderModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FolderModel.


        :param id: The id of this FolderModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this FolderModel.  # noqa: E501


        :return: The title of this FolderModel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this FolderModel.


        :param title: The title of this FolderModel.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def uid(self):
        """Gets the uid of this FolderModel.  # noqa: E501


        :return: The uid of this FolderModel.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this FolderModel.


        :param uid: The uid of this FolderModel.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def updated(self):
        """Gets the updated of this FolderModel.  # noqa: E501


        :return: The updated of this FolderModel.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this FolderModel.


        :param updated: The updated of this FolderModel.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def updated_by(self):
        """Gets the updated_by of this FolderModel.  # noqa: E501


        :return: The updated_by of this FolderModel.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this FolderModel.


        :param updated_by: The updated_by of this FolderModel.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def url(self):
        """Gets the url of this FolderModel.  # noqa: E501


        :return: The url of this FolderModel.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FolderModel.


        :param url: The url of this FolderModel.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def version(self):
        """Gets the version of this FolderModel.  # noqa: E501


        :return: The version of this FolderModel.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FolderModel.


        :param version: The version of this FolderModel.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FolderModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FolderModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FolderModel):
            return True

        return self.to_dict() != other.to_dict()
