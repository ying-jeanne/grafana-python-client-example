# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pythonclient.configuration import Configuration


class EmbeddedContactPointModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disable_resolve_message': 'bool',
        'name': 'str',
        'provenance': 'str',
        'settings': 'JsonModel',
        'type': 'str',
        'uid': 'str'
    }

    attribute_map = {
        'disable_resolve_message': 'disableResolveMessage',
        'name': 'name',
        'provenance': 'provenance',
        'settings': 'settings',
        'type': 'type',
        'uid': 'uid'
    }

    def __init__(self, disable_resolve_message=None, name=None, provenance=None, settings=None, type=None, uid=None, _configuration=None):  # noqa: E501
        """EmbeddedContactPointModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._disable_resolve_message = None
        self._name = None
        self._provenance = None
        self._settings = None
        self._type = None
        self._uid = None
        self.discriminator = None

        if disable_resolve_message is not None:
            self.disable_resolve_message = disable_resolve_message
        if name is not None:
            self.name = name
        if provenance is not None:
            self.provenance = provenance
        if settings is not None:
            self.settings = settings
        if type is not None:
            self.type = type
        if uid is not None:
            self.uid = uid

    @property
    def disable_resolve_message(self):
        """Gets the disable_resolve_message of this EmbeddedContactPointModel.  # noqa: E501


        :return: The disable_resolve_message of this EmbeddedContactPointModel.  # noqa: E501
        :rtype: bool
        """
        return self._disable_resolve_message

    @disable_resolve_message.setter
    def disable_resolve_message(self, disable_resolve_message):
        """Sets the disable_resolve_message of this EmbeddedContactPointModel.


        :param disable_resolve_message: The disable_resolve_message of this EmbeddedContactPointModel.  # noqa: E501
        :type: bool
        """

        self._disable_resolve_message = disable_resolve_message

    @property
    def name(self):
        """Gets the name of this EmbeddedContactPointModel.  # noqa: E501

        Name is used as grouping key in the UI. Contact points with the same name will be grouped in the UI.  # noqa: E501

        :return: The name of this EmbeddedContactPointModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EmbeddedContactPointModel.

        Name is used as grouping key in the UI. Contact points with the same name will be grouped in the UI.  # noqa: E501

        :param name: The name of this EmbeddedContactPointModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def provenance(self):
        """Gets the provenance of this EmbeddedContactPointModel.  # noqa: E501


        :return: The provenance of this EmbeddedContactPointModel.  # noqa: E501
        :rtype: str
        """
        return self._provenance

    @provenance.setter
    def provenance(self, provenance):
        """Sets the provenance of this EmbeddedContactPointModel.


        :param provenance: The provenance of this EmbeddedContactPointModel.  # noqa: E501
        :type: str
        """

        self._provenance = provenance

    @property
    def settings(self):
        """Gets the settings of this EmbeddedContactPointModel.  # noqa: E501


        :return: The settings of this EmbeddedContactPointModel.  # noqa: E501
        :rtype: JsonModel
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this EmbeddedContactPointModel.


        :param settings: The settings of this EmbeddedContactPointModel.  # noqa: E501
        :type: JsonModel
        """

        self._settings = settings

    @property
    def type(self):
        """Gets the type of this EmbeddedContactPointModel.  # noqa: E501


        :return: The type of this EmbeddedContactPointModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EmbeddedContactPointModel.


        :param type: The type of this EmbeddedContactPointModel.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this EmbeddedContactPointModel.  # noqa: E501

        UID is the unique identifier of the contact point. This will be automatically set be the Grafana.  # noqa: E501

        :return: The uid of this EmbeddedContactPointModel.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this EmbeddedContactPointModel.

        UID is the unique identifier of the contact point. This will be automatically set be the Grafana.  # noqa: E501

        :param uid: The uid of this EmbeddedContactPointModel.  # noqa: E501
        :type: str
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmbeddedContactPointModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmbeddedContactPointModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmbeddedContactPointModel):
            return True

        return self.to_dict() != other.to_dict()
