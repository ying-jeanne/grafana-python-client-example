# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from gpyclient.configuration import Configuration


class DashboardPanelFieldConfigDefaultsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'DashboardFieldColorModel',
        'custom': 'object',
        'decimals': 'float',
        'description': 'str',
        'display_name': 'str',
        'display_name_from_ds': 'str',
        'filterable': 'bool',
        'links': 'list[object]',
        'mappings': 'list[object]',
        'max': 'float',
        'min': 'float',
        'no_value': 'str',
        'path': 'str',
        'thresholds': 'DashboardThresholdsConfigModel',
        'unit': 'str',
        'writeable': 'bool'
    }

    attribute_map = {
        'color': 'color',
        'custom': 'custom',
        'decimals': 'decimals',
        'description': 'description',
        'display_name': 'displayName',
        'display_name_from_ds': 'displayNameFromDS',
        'filterable': 'filterable',
        'links': 'links',
        'mappings': 'mappings',
        'max': 'max',
        'min': 'min',
        'no_value': 'noValue',
        'path': 'path',
        'thresholds': 'thresholds',
        'unit': 'unit',
        'writeable': 'writeable'
    }

    def __init__(self, color=None, custom=None, decimals=None, description=None, display_name=None, display_name_from_ds=None, filterable=None, links=None, mappings=None, max=None, min=None, no_value=None, path=None, thresholds=None, unit=None, writeable=None, _configuration=None):  # noqa: E501
        """DashboardPanelFieldConfigDefaultsModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._color = None
        self._custom = None
        self._decimals = None
        self._description = None
        self._display_name = None
        self._display_name_from_ds = None
        self._filterable = None
        self._links = None
        self._mappings = None
        self._max = None
        self._min = None
        self._no_value = None
        self._path = None
        self._thresholds = None
        self._unit = None
        self._writeable = None
        self.discriminator = None

        if color is not None:
            self.color = color
        if custom is not None:
            self.custom = custom
        if decimals is not None:
            self.decimals = decimals
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if display_name_from_ds is not None:
            self.display_name_from_ds = display_name_from_ds
        if filterable is not None:
            self.filterable = filterable
        if links is not None:
            self.links = links
        if mappings is not None:
            self.mappings = mappings
        if max is not None:
            self.max = max
        if min is not None:
            self.min = min
        if no_value is not None:
            self.no_value = no_value
        if path is not None:
            self.path = path
        if thresholds is not None:
            self.thresholds = thresholds
        if unit is not None:
            self.unit = unit
        if writeable is not None:
            self.writeable = writeable

    @property
    def color(self):
        """Gets the color of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501


        :return: The color of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :rtype: DashboardFieldColorModel
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this DashboardPanelFieldConfigDefaultsModel.


        :param color: The color of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :type: DashboardFieldColorModel
        """

        self._color = color

    @property
    def custom(self):
        """Gets the custom of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501

        custom is specified by the PanelFieldConfig field in panel plugin schemas.  # noqa: E501

        :return: The custom of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :rtype: object
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this DashboardPanelFieldConfigDefaultsModel.

        custom is specified by the PanelFieldConfig field in panel plugin schemas.  # noqa: E501

        :param custom: The custom of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :type: object
        """

        self._custom = custom

    @property
    def decimals(self):
        """Gets the decimals of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501

        Significant digits (for display)  # noqa: E501

        :return: The decimals of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :rtype: float
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this DashboardPanelFieldConfigDefaultsModel.

        Significant digits (for display)  # noqa: E501

        :param decimals: The decimals of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :type: float
        """

        self._decimals = decimals

    @property
    def description(self):
        """Gets the description of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501

        Human readable field metadata  # noqa: E501

        :return: The description of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DashboardPanelFieldConfigDefaultsModel.

        Human readable field metadata  # noqa: E501

        :param description: The description of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501

        The display value for this field.  This supports template variables blank is auto  # noqa: E501

        :return: The display_name of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DashboardPanelFieldConfigDefaultsModel.

        The display value for this field.  This supports template variables blank is auto  # noqa: E501

        :param display_name: The display_name of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def display_name_from_ds(self):
        """Gets the display_name_from_ds of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501

        This can be used by data sources that return and explicit naming structure for values and labels When this property is configured, this value is used rather than the default naming strategy.  # noqa: E501

        :return: The display_name_from_ds of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :rtype: str
        """
        return self._display_name_from_ds

    @display_name_from_ds.setter
    def display_name_from_ds(self, display_name_from_ds):
        """Sets the display_name_from_ds of this DashboardPanelFieldConfigDefaultsModel.

        This can be used by data sources that return and explicit naming structure for values and labels When this property is configured, this value is used rather than the default naming strategy.  # noqa: E501

        :param display_name_from_ds: The display_name_from_ds of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :type: str
        """

        self._display_name_from_ds = display_name_from_ds

    @property
    def filterable(self):
        """Gets the filterable of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501

        True if data source field supports ad-hoc filters  # noqa: E501

        :return: The filterable of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :rtype: bool
        """
        return self._filterable

    @filterable.setter
    def filterable(self, filterable):
        """Sets the filterable of this DashboardPanelFieldConfigDefaultsModel.

        True if data source field supports ad-hoc filters  # noqa: E501

        :param filterable: The filterable of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :type: bool
        """

        self._filterable = filterable

    @property
    def links(self):
        """Gets the links of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501

        // The behavior when clicking on a result  # noqa: E501

        :return: The links of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :rtype: list[object]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DashboardPanelFieldConfigDefaultsModel.

        // The behavior when clicking on a result  # noqa: E501

        :param links: The links of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :type: list[object]
        """

        self._links = links

    @property
    def mappings(self):
        """Gets the mappings of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501

        Convert input values into a display string  TODO this one corresponds to a complex type with generics on the typescript side. Ouch. Will either need special care, or we'll just need to accept a very loosely specified schema. It's very unlikely we'll be able to translate cue to typescript generics in the general case, though this particular one *may* be able to work.  # noqa: E501

        :return: The mappings of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :rtype: list[object]
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """Sets the mappings of this DashboardPanelFieldConfigDefaultsModel.

        Convert input values into a display string  TODO this one corresponds to a complex type with generics on the typescript side. Ouch. Will either need special care, or we'll just need to accept a very loosely specified schema. It's very unlikely we'll be able to translate cue to typescript generics in the general case, though this particular one *may* be able to work.  # noqa: E501

        :param mappings: The mappings of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :type: list[object]
        """

        self._mappings = mappings

    @property
    def max(self):
        """Gets the max of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501


        :return: The max of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this DashboardPanelFieldConfigDefaultsModel.


        :param max: The max of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :type: float
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501


        :return: The min of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this DashboardPanelFieldConfigDefaultsModel.


        :param min: The min of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :type: float
        """

        self._min = min

    @property
    def no_value(self):
        """Gets the no_value of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501

        Alternative to empty string  # noqa: E501

        :return: The no_value of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :rtype: str
        """
        return self._no_value

    @no_value.setter
    def no_value(self, no_value):
        """Sets the no_value of this DashboardPanelFieldConfigDefaultsModel.

        Alternative to empty string  # noqa: E501

        :param no_value: The no_value of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :type: str
        """

        self._no_value = no_value

    @property
    def path(self):
        """Gets the path of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501

        An explict path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}  When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results  # noqa: E501

        :return: The path of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this DashboardPanelFieldConfigDefaultsModel.

        An explict path to the field in the datasource.  When the frame meta includes a path, This will default to `${frame.meta.path}/${field.name}  When defined, this value can be used as an identifier within the datasource scope, and may be used to update the results  # noqa: E501

        :param path: The path of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def thresholds(self):
        """Gets the thresholds of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501


        :return: The thresholds of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :rtype: DashboardThresholdsConfigModel
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """Sets the thresholds of this DashboardPanelFieldConfigDefaultsModel.


        :param thresholds: The thresholds of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :type: DashboardThresholdsConfigModel
        """

        self._thresholds = thresholds

    @property
    def unit(self):
        """Gets the unit of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501

        Numeric Options  # noqa: E501

        :return: The unit of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this DashboardPanelFieldConfigDefaultsModel.

        Numeric Options  # noqa: E501

        :param unit: The unit of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def writeable(self):
        """Gets the writeable of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501

        True if data source can write a value to the path.  Auth/authz are supported separately  # noqa: E501

        :return: The writeable of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :rtype: bool
        """
        return self._writeable

    @writeable.setter
    def writeable(self, writeable):
        """Sets the writeable of this DashboardPanelFieldConfigDefaultsModel.

        True if data source can write a value to the path.  Auth/authz are supported separately  # noqa: E501

        :param writeable: The writeable of this DashboardPanelFieldConfigDefaultsModel.  # noqa: E501
        :type: bool
        """

        self._writeable = writeable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardPanelFieldConfigDefaultsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardPanelFieldConfigDefaultsModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DashboardPanelFieldConfigDefaultsModel):
            return True

        return self.to_dict() != other.to_dict()
