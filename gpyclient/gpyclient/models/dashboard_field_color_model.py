# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from gpyclient.configuration import Configuration


class DashboardFieldColorModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fixed_color': 'str',
        'mode': 'str',
        'series_by': 'DashboardFieldColorSeriesByModeModel'
    }

    attribute_map = {
        'fixed_color': 'fixedColor',
        'mode': 'mode',
        'series_by': 'seriesBy'
    }

    def __init__(self, fixed_color=None, mode=None, series_by=None, _configuration=None):  # noqa: E501
        """DashboardFieldColorModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fixed_color = None
        self._mode = None
        self._series_by = None
        self.discriminator = None

        if fixed_color is not None:
            self.fixed_color = fixed_color
        self.mode = mode
        if series_by is not None:
            self.series_by = series_by

    @property
    def fixed_color(self):
        """Gets the fixed_color of this DashboardFieldColorModel.  # noqa: E501

        Stores the fixed color value if mode is fixed  # noqa: E501

        :return: The fixed_color of this DashboardFieldColorModel.  # noqa: E501
        :rtype: str
        """
        return self._fixed_color

    @fixed_color.setter
    def fixed_color(self, fixed_color):
        """Sets the fixed_color of this DashboardFieldColorModel.

        Stores the fixed color value if mode is fixed  # noqa: E501

        :param fixed_color: The fixed_color of this DashboardFieldColorModel.  # noqa: E501
        :type: str
        """

        self._fixed_color = fixed_color

    @property
    def mode(self):
        """Gets the mode of this DashboardFieldColorModel.  # noqa: E501

        The main color scheme mode  # noqa: E501

        :return: The mode of this DashboardFieldColorModel.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this DashboardFieldColorModel.

        The main color scheme mode  # noqa: E501

        :param mode: The mode of this DashboardFieldColorModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode

    @property
    def series_by(self):
        """Gets the series_by of this DashboardFieldColorModel.  # noqa: E501


        :return: The series_by of this DashboardFieldColorModel.  # noqa: E501
        :rtype: DashboardFieldColorSeriesByModeModel
        """
        return self._series_by

    @series_by.setter
    def series_by(self, series_by):
        """Sets the series_by of this DashboardFieldColorModel.


        :param series_by: The series_by of this DashboardFieldColorModel.  # noqa: E501
        :type: DashboardFieldColorSeriesByModeModel
        """

        self._series_by = series_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardFieldColorModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardFieldColorModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DashboardFieldColorModel):
            return True

        return self.to_dict() != other.to_dict()
