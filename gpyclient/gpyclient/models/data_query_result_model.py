# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from gpyclient.configuration import Configuration


class DataQueryResultModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataframes': 'DataFramesModel',
        'error': 'str',
        'meta': 'JsonModel',
        'ref_id': 'str',
        'series': 'DataTimeSeriesSliceModel',
        'tables': 'list[DataTableModel]'
    }

    attribute_map = {
        'dataframes': 'dataframes',
        'error': 'error',
        'meta': 'meta',
        'ref_id': 'refId',
        'series': 'series',
        'tables': 'tables'
    }

    def __init__(self, dataframes=None, error=None, meta=None, ref_id=None, series=None, tables=None, _configuration=None):  # noqa: E501
        """DataQueryResultModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dataframes = None
        self._error = None
        self._meta = None
        self._ref_id = None
        self._series = None
        self._tables = None
        self.discriminator = None

        if dataframes is not None:
            self.dataframes = dataframes
        if error is not None:
            self.error = error
        if meta is not None:
            self.meta = meta
        if ref_id is not None:
            self.ref_id = ref_id
        if series is not None:
            self.series = series
        if tables is not None:
            self.tables = tables

    @property
    def dataframes(self):
        """Gets the dataframes of this DataQueryResultModel.  # noqa: E501


        :return: The dataframes of this DataQueryResultModel.  # noqa: E501
        :rtype: DataFramesModel
        """
        return self._dataframes

    @dataframes.setter
    def dataframes(self, dataframes):
        """Sets the dataframes of this DataQueryResultModel.


        :param dataframes: The dataframes of this DataQueryResultModel.  # noqa: E501
        :type: DataFramesModel
        """

        self._dataframes = dataframes

    @property
    def error(self):
        """Gets the error of this DataQueryResultModel.  # noqa: E501


        :return: The error of this DataQueryResultModel.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this DataQueryResultModel.


        :param error: The error of this DataQueryResultModel.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def meta(self):
        """Gets the meta of this DataQueryResultModel.  # noqa: E501


        :return: The meta of this DataQueryResultModel.  # noqa: E501
        :rtype: JsonModel
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this DataQueryResultModel.


        :param meta: The meta of this DataQueryResultModel.  # noqa: E501
        :type: JsonModel
        """

        self._meta = meta

    @property
    def ref_id(self):
        """Gets the ref_id of this DataQueryResultModel.  # noqa: E501


        :return: The ref_id of this DataQueryResultModel.  # noqa: E501
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this DataQueryResultModel.


        :param ref_id: The ref_id of this DataQueryResultModel.  # noqa: E501
        :type: str
        """

        self._ref_id = ref_id

    @property
    def series(self):
        """Gets the series of this DataQueryResultModel.  # noqa: E501


        :return: The series of this DataQueryResultModel.  # noqa: E501
        :rtype: DataTimeSeriesSliceModel
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this DataQueryResultModel.


        :param series: The series of this DataQueryResultModel.  # noqa: E501
        :type: DataTimeSeriesSliceModel
        """

        self._series = series

    @property
    def tables(self):
        """Gets the tables of this DataQueryResultModel.  # noqa: E501


        :return: The tables of this DataQueryResultModel.  # noqa: E501
        :rtype: list[DataTableModel]
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """Sets the tables of this DataQueryResultModel.


        :param tables: The tables of this DataQueryResultModel.  # noqa: E501
        :type: list[DataTableModel]
        """

        self._tables = tables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataQueryResultModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataQueryResultModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataQueryResultModel):
            return True

        return self.to_dict() != other.to_dict()
