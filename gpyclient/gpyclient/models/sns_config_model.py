# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from gpyclient.configuration import Configuration


class SNSConfigModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_url': 'str',
        'attributes': 'dict(str, str)',
        'http_config': 'HTTPClientConfigModel',
        'message': 'str',
        'phone_number': 'str',
        'send_resolved': 'bool',
        'sigv4': 'SigV4ConfigModel',
        'subject': 'str',
        'target_arn': 'str',
        'topic_arn': 'str'
    }

    attribute_map = {
        'api_url': 'api_url',
        'attributes': 'attributes',
        'http_config': 'http_config',
        'message': 'message',
        'phone_number': 'phone_number',
        'send_resolved': 'send_resolved',
        'sigv4': 'sigv4',
        'subject': 'subject',
        'target_arn': 'target_arn',
        'topic_arn': 'topic_arn'
    }

    def __init__(self, api_url=None, attributes=None, http_config=None, message=None, phone_number=None, send_resolved=None, sigv4=None, subject=None, target_arn=None, topic_arn=None, _configuration=None):  # noqa: E501
        """SNSConfigModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._api_url = None
        self._attributes = None
        self._http_config = None
        self._message = None
        self._phone_number = None
        self._send_resolved = None
        self._sigv4 = None
        self._subject = None
        self._target_arn = None
        self._topic_arn = None
        self.discriminator = None

        if api_url is not None:
            self.api_url = api_url
        if attributes is not None:
            self.attributes = attributes
        if http_config is not None:
            self.http_config = http_config
        if message is not None:
            self.message = message
        if phone_number is not None:
            self.phone_number = phone_number
        if send_resolved is not None:
            self.send_resolved = send_resolved
        if sigv4 is not None:
            self.sigv4 = sigv4
        if subject is not None:
            self.subject = subject
        if target_arn is not None:
            self.target_arn = target_arn
        if topic_arn is not None:
            self.topic_arn = topic_arn

    @property
    def api_url(self):
        """Gets the api_url of this SNSConfigModel.  # noqa: E501


        :return: The api_url of this SNSConfigModel.  # noqa: E501
        :rtype: str
        """
        return self._api_url

    @api_url.setter
    def api_url(self, api_url):
        """Sets the api_url of this SNSConfigModel.


        :param api_url: The api_url of this SNSConfigModel.  # noqa: E501
        :type: str
        """

        self._api_url = api_url

    @property
    def attributes(self):
        """Gets the attributes of this SNSConfigModel.  # noqa: E501


        :return: The attributes of this SNSConfigModel.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this SNSConfigModel.


        :param attributes: The attributes of this SNSConfigModel.  # noqa: E501
        :type: dict(str, str)
        """

        self._attributes = attributes

    @property
    def http_config(self):
        """Gets the http_config of this SNSConfigModel.  # noqa: E501


        :return: The http_config of this SNSConfigModel.  # noqa: E501
        :rtype: HTTPClientConfigModel
        """
        return self._http_config

    @http_config.setter
    def http_config(self, http_config):
        """Sets the http_config of this SNSConfigModel.


        :param http_config: The http_config of this SNSConfigModel.  # noqa: E501
        :type: HTTPClientConfigModel
        """

        self._http_config = http_config

    @property
    def message(self):
        """Gets the message of this SNSConfigModel.  # noqa: E501


        :return: The message of this SNSConfigModel.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SNSConfigModel.


        :param message: The message of this SNSConfigModel.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def phone_number(self):
        """Gets the phone_number of this SNSConfigModel.  # noqa: E501


        :return: The phone_number of this SNSConfigModel.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this SNSConfigModel.


        :param phone_number: The phone_number of this SNSConfigModel.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def send_resolved(self):
        """Gets the send_resolved of this SNSConfigModel.  # noqa: E501


        :return: The send_resolved of this SNSConfigModel.  # noqa: E501
        :rtype: bool
        """
        return self._send_resolved

    @send_resolved.setter
    def send_resolved(self, send_resolved):
        """Sets the send_resolved of this SNSConfigModel.


        :param send_resolved: The send_resolved of this SNSConfigModel.  # noqa: E501
        :type: bool
        """

        self._send_resolved = send_resolved

    @property
    def sigv4(self):
        """Gets the sigv4 of this SNSConfigModel.  # noqa: E501


        :return: The sigv4 of this SNSConfigModel.  # noqa: E501
        :rtype: SigV4ConfigModel
        """
        return self._sigv4

    @sigv4.setter
    def sigv4(self, sigv4):
        """Sets the sigv4 of this SNSConfigModel.


        :param sigv4: The sigv4 of this SNSConfigModel.  # noqa: E501
        :type: SigV4ConfigModel
        """

        self._sigv4 = sigv4

    @property
    def subject(self):
        """Gets the subject of this SNSConfigModel.  # noqa: E501


        :return: The subject of this SNSConfigModel.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SNSConfigModel.


        :param subject: The subject of this SNSConfigModel.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def target_arn(self):
        """Gets the target_arn of this SNSConfigModel.  # noqa: E501


        :return: The target_arn of this SNSConfigModel.  # noqa: E501
        :rtype: str
        """
        return self._target_arn

    @target_arn.setter
    def target_arn(self, target_arn):
        """Sets the target_arn of this SNSConfigModel.


        :param target_arn: The target_arn of this SNSConfigModel.  # noqa: E501
        :type: str
        """

        self._target_arn = target_arn

    @property
    def topic_arn(self):
        """Gets the topic_arn of this SNSConfigModel.  # noqa: E501


        :return: The topic_arn of this SNSConfigModel.  # noqa: E501
        :rtype: str
        """
        return self._topic_arn

    @topic_arn.setter
    def topic_arn(self, topic_arn):
        """Sets the topic_arn of this SNSConfigModel.


        :param topic_arn: The topic_arn of this SNSConfigModel.  # noqa: E501
        :type: str
        """

        self._topic_arn = topic_arn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SNSConfigModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SNSConfigModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SNSConfigModel):
            return True

        return self.to_dict() != other.to_dict()
