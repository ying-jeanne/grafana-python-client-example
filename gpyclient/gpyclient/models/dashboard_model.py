# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from gpyclient.configuration import Configuration


class DashboardModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotations': 'DashboardAnnotationsModel',
        'description': 'str',
        'editable': 'bool',
        'fiscal_year_start_month': 'int',
        'gnet_id': 'str',
        'graph_tooltip': 'int',
        'id': 'int',
        'links': 'list[DashboardDashboardLinkModel]',
        'live_now': 'bool',
        'panels': 'list[object]',
        'refresh': 'object',
        'schema_version': 'int',
        'style': 'str',
        'tags': 'list[str]',
        'templating': 'DashboardTemplatingModel',
        'time': 'DashboardTimeModel',
        'timepicker': 'DashboardTimepickerModel',
        'timezone': 'str',
        'title': 'str',
        'uid': 'str',
        'version': 'int',
        'week_start': 'str'
    }

    attribute_map = {
        'annotations': 'annotations',
        'description': 'description',
        'editable': 'editable',
        'fiscal_year_start_month': 'fiscalYearStartMonth',
        'gnet_id': 'gnetId',
        'graph_tooltip': 'graphTooltip',
        'id': 'id',
        'links': 'links',
        'live_now': 'liveNow',
        'panels': 'panels',
        'refresh': 'refresh',
        'schema_version': 'schemaVersion',
        'style': 'style',
        'tags': 'tags',
        'templating': 'templating',
        'time': 'time',
        'timepicker': 'timepicker',
        'timezone': 'timezone',
        'title': 'title',
        'uid': 'uid',
        'version': 'version',
        'week_start': 'weekStart'
    }

    def __init__(self, annotations=None, description=None, editable=True, fiscal_year_start_month=None, gnet_id=None, graph_tooltip=None, id=None, links=None, live_now=None, panels=None, refresh=None, schema_version=None, style='dark', tags=None, templating=None, time=None, timepicker=None, timezone='browser', title=None, uid=None, version=None, week_start=None, _configuration=None):  # noqa: E501
        """DashboardModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._annotations = None
        self._description = None
        self._editable = None
        self._fiscal_year_start_month = None
        self._gnet_id = None
        self._graph_tooltip = None
        self._id = None
        self._links = None
        self._live_now = None
        self._panels = None
        self._refresh = None
        self._schema_version = None
        self._style = None
        self._tags = None
        self._templating = None
        self._time = None
        self._timepicker = None
        self._timezone = None
        self._title = None
        self._uid = None
        self._version = None
        self._week_start = None
        self.discriminator = None

        if annotations is not None:
            self.annotations = annotations
        if description is not None:
            self.description = description
        self.editable = editable
        if fiscal_year_start_month is not None:
            self.fiscal_year_start_month = fiscal_year_start_month
        if gnet_id is not None:
            self.gnet_id = gnet_id
        self.graph_tooltip = graph_tooltip
        if id is not None:
            self.id = id
        if links is not None:
            self.links = links
        if live_now is not None:
            self.live_now = live_now
        if panels is not None:
            self.panels = panels
        if refresh is not None:
            self.refresh = refresh
        self.schema_version = schema_version
        self.style = style
        if tags is not None:
            self.tags = tags
        if templating is not None:
            self.templating = templating
        if time is not None:
            self.time = time
        if timepicker is not None:
            self.timepicker = timepicker
        if timezone is not None:
            self.timezone = timezone
        if title is not None:
            self.title = title
        if uid is not None:
            self.uid = uid
        if version is not None:
            self.version = version
        if week_start is not None:
            self.week_start = week_start

    @property
    def annotations(self):
        """Gets the annotations of this DashboardModel.  # noqa: E501


        :return: The annotations of this DashboardModel.  # noqa: E501
        :rtype: DashboardAnnotationsModel
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this DashboardModel.


        :param annotations: The annotations of this DashboardModel.  # noqa: E501
        :type: DashboardAnnotationsModel
        """

        self._annotations = annotations

    @property
    def description(self):
        """Gets the description of this DashboardModel.  # noqa: E501

        Description of dashboard.  # noqa: E501

        :return: The description of this DashboardModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DashboardModel.

        Description of dashboard.  # noqa: E501

        :param description: The description of this DashboardModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def editable(self):
        """Gets the editable of this DashboardModel.  # noqa: E501

        Whether a dashboard is editable or not.  # noqa: E501

        :return: The editable of this DashboardModel.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this DashboardModel.

        Whether a dashboard is editable or not.  # noqa: E501

        :param editable: The editable of this DashboardModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and editable is None:
            raise ValueError("Invalid value for `editable`, must not be `None`")  # noqa: E501

        self._editable = editable

    @property
    def fiscal_year_start_month(self):
        """Gets the fiscal_year_start_month of this DashboardModel.  # noqa: E501

        TODO docs  # noqa: E501

        :return: The fiscal_year_start_month of this DashboardModel.  # noqa: E501
        :rtype: int
        """
        return self._fiscal_year_start_month

    @fiscal_year_start_month.setter
    def fiscal_year_start_month(self, fiscal_year_start_month):
        """Sets the fiscal_year_start_month of this DashboardModel.

        TODO docs  # noqa: E501

        :param fiscal_year_start_month: The fiscal_year_start_month of this DashboardModel.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                fiscal_year_start_month is not None and fiscal_year_start_month >= 13):  # noqa: E501
            raise ValueError("Invalid value for `fiscal_year_start_month`, must be a value less than `13`")  # noqa: E501

        self._fiscal_year_start_month = fiscal_year_start_month

    @property
    def gnet_id(self):
        """Gets the gnet_id of this DashboardModel.  # noqa: E501


        :return: The gnet_id of this DashboardModel.  # noqa: E501
        :rtype: str
        """
        return self._gnet_id

    @gnet_id.setter
    def gnet_id(self, gnet_id):
        """Sets the gnet_id of this DashboardModel.


        :param gnet_id: The gnet_id of this DashboardModel.  # noqa: E501
        :type: str
        """

        self._gnet_id = gnet_id

    @property
    def graph_tooltip(self):
        """Gets the graph_tooltip of this DashboardModel.  # noqa: E501


        :return: The graph_tooltip of this DashboardModel.  # noqa: E501
        :rtype: int
        """
        return self._graph_tooltip

    @graph_tooltip.setter
    def graph_tooltip(self, graph_tooltip):
        """Sets the graph_tooltip of this DashboardModel.


        :param graph_tooltip: The graph_tooltip of this DashboardModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and graph_tooltip is None:
            raise ValueError("Invalid value for `graph_tooltip`, must not be `None`")  # noqa: E501

        self._graph_tooltip = graph_tooltip

    @property
    def id(self):
        """Gets the id of this DashboardModel.  # noqa: E501

        Unique numeric identifier for the dashboard. TODO must isolate or remove identifiers local to a Grafana instance...?  # noqa: E501

        :return: The id of this DashboardModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardModel.

        Unique numeric identifier for the dashboard. TODO must isolate or remove identifiers local to a Grafana instance...?  # noqa: E501

        :param id: The id of this DashboardModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this DashboardModel.  # noqa: E501

        TODO docs  # noqa: E501

        :return: The links of this DashboardModel.  # noqa: E501
        :rtype: list[DashboardDashboardLinkModel]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DashboardModel.

        TODO docs  # noqa: E501

        :param links: The links of this DashboardModel.  # noqa: E501
        :type: list[DashboardDashboardLinkModel]
        """

        self._links = links

    @property
    def live_now(self):
        """Gets the live_now of this DashboardModel.  # noqa: E501

        TODO docs  # noqa: E501

        :return: The live_now of this DashboardModel.  # noqa: E501
        :rtype: bool
        """
        return self._live_now

    @live_now.setter
    def live_now(self, live_now):
        """Sets the live_now of this DashboardModel.

        TODO docs  # noqa: E501

        :param live_now: The live_now of this DashboardModel.  # noqa: E501
        :type: bool
        """

        self._live_now = live_now

    @property
    def panels(self):
        """Gets the panels of this DashboardModel.  # noqa: E501


        :return: The panels of this DashboardModel.  # noqa: E501
        :rtype: list[object]
        """
        return self._panels

    @panels.setter
    def panels(self, panels):
        """Sets the panels of this DashboardModel.


        :param panels: The panels of this DashboardModel.  # noqa: E501
        :type: list[object]
        """

        self._panels = panels

    @property
    def refresh(self):
        """Gets the refresh of this DashboardModel.  # noqa: E501

        TODO docs  # noqa: E501

        :return: The refresh of this DashboardModel.  # noqa: E501
        :rtype: object
        """
        return self._refresh

    @refresh.setter
    def refresh(self, refresh):
        """Sets the refresh of this DashboardModel.

        TODO docs  # noqa: E501

        :param refresh: The refresh of this DashboardModel.  # noqa: E501
        :type: object
        """

        self._refresh = refresh

    @property
    def schema_version(self):
        """Gets the schema_version of this DashboardModel.  # noqa: E501

        Version of the JSON schema, incremented each time a Grafana update brings changes to said schema. TODO this is the existing schema numbering system. It will be replaced by Thema's themaVersion  # noqa: E501

        :return: The schema_version of this DashboardModel.  # noqa: E501
        :rtype: int
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this DashboardModel.

        Version of the JSON schema, incremented each time a Grafana update brings changes to said schema. TODO this is the existing schema numbering system. It will be replaced by Thema's themaVersion  # noqa: E501

        :param schema_version: The schema_version of this DashboardModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and schema_version is None:
            raise ValueError("Invalid value for `schema_version`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                schema_version is not None and schema_version > 65535):  # noqa: E501
            raise ValueError("Invalid value for `schema_version`, must be a value less than or equal to `65535`")  # noqa: E501

        self._schema_version = schema_version

    @property
    def style(self):
        """Gets the style of this DashboardModel.  # noqa: E501

        Theme of dashboard.  # noqa: E501

        :return: The style of this DashboardModel.  # noqa: E501
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this DashboardModel.

        Theme of dashboard.  # noqa: E501

        :param style: The style of this DashboardModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and style is None:
            raise ValueError("Invalid value for `style`, must not be `None`")  # noqa: E501
        allowed_values = ["dark", "light"]  # noqa: E501
        if (self._configuration.client_side_validation and
                style not in allowed_values):
            raise ValueError(
                "Invalid value for `style` ({0}), must be one of {1}"  # noqa: E501
                .format(style, allowed_values)
            )

        self._style = style

    @property
    def tags(self):
        """Gets the tags of this DashboardModel.  # noqa: E501

        Tags associated with dashboard.  # noqa: E501

        :return: The tags of this DashboardModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DashboardModel.

        Tags associated with dashboard.  # noqa: E501

        :param tags: The tags of this DashboardModel.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def templating(self):
        """Gets the templating of this DashboardModel.  # noqa: E501


        :return: The templating of this DashboardModel.  # noqa: E501
        :rtype: DashboardTemplatingModel
        """
        return self._templating

    @templating.setter
    def templating(self, templating):
        """Sets the templating of this DashboardModel.


        :param templating: The templating of this DashboardModel.  # noqa: E501
        :type: DashboardTemplatingModel
        """

        self._templating = templating

    @property
    def time(self):
        """Gets the time of this DashboardModel.  # noqa: E501


        :return: The time of this DashboardModel.  # noqa: E501
        :rtype: DashboardTimeModel
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DashboardModel.


        :param time: The time of this DashboardModel.  # noqa: E501
        :type: DashboardTimeModel
        """

        self._time = time

    @property
    def timepicker(self):
        """Gets the timepicker of this DashboardModel.  # noqa: E501


        :return: The timepicker of this DashboardModel.  # noqa: E501
        :rtype: DashboardTimepickerModel
        """
        return self._timepicker

    @timepicker.setter
    def timepicker(self, timepicker):
        """Sets the timepicker of this DashboardModel.


        :param timepicker: The timepicker of this DashboardModel.  # noqa: E501
        :type: DashboardTimepickerModel
        """

        self._timepicker = timepicker

    @property
    def timezone(self):
        """Gets the timezone of this DashboardModel.  # noqa: E501

        Timezone of dashboard,  # noqa: E501

        :return: The timezone of this DashboardModel.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this DashboardModel.

        Timezone of dashboard,  # noqa: E501

        :param timezone: The timezone of this DashboardModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["browser", "utc", ""]  # noqa: E501
        if (self._configuration.client_side_validation and
                timezone not in allowed_values):
            raise ValueError(
                "Invalid value for `timezone` ({0}), must be one of {1}"  # noqa: E501
                .format(timezone, allowed_values)
            )

        self._timezone = timezone

    @property
    def title(self):
        """Gets the title of this DashboardModel.  # noqa: E501

        Title of dashboard.  # noqa: E501

        :return: The title of this DashboardModel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DashboardModel.

        Title of dashboard.  # noqa: E501

        :param title: The title of this DashboardModel.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def uid(self):
        """Gets the uid of this DashboardModel.  # noqa: E501

        Unique dashboard identifier that can be generated by anyone. string (8-40)  # noqa: E501

        :return: The uid of this DashboardModel.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this DashboardModel.

        Unique dashboard identifier that can be generated by anyone. string (8-40)  # noqa: E501

        :param uid: The uid of this DashboardModel.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def version(self):
        """Gets the version of this DashboardModel.  # noqa: E501

        Version of the dashboard, incremented each time the dashboard is updated.  # noqa: E501

        :return: The version of this DashboardModel.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DashboardModel.

        Version of the dashboard, incremented each time the dashboard is updated.  # noqa: E501

        :param version: The version of this DashboardModel.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                version is not None and version > 4294967295):  # noqa: E501
            raise ValueError("Invalid value for `version`, must be a value less than or equal to `4294967295`")  # noqa: E501

        self._version = version

    @property
    def week_start(self):
        """Gets the week_start of this DashboardModel.  # noqa: E501

        TODO docs  # noqa: E501

        :return: The week_start of this DashboardModel.  # noqa: E501
        :rtype: str
        """
        return self._week_start

    @week_start.setter
    def week_start(self, week_start):
        """Sets the week_start of this DashboardModel.

        TODO docs  # noqa: E501

        :param week_start: The week_start of this DashboardModel.  # noqa: E501
        :type: str
        """

        self._week_start = week_start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DashboardModel):
            return True

        return self.to_dict() != other.to_dict()
