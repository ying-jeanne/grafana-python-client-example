# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from gpyclient.configuration import Configuration


class DashboardAnnotationQueryModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'built_in': 'int',
        'datasource': 'DashboardAnnotationQueryDatasourceModel',
        'enable': 'bool',
        'hide': 'bool',
        'icon_color': 'str',
        'name': 'str',
        'raw_query': 'str',
        'show_in': 'int',
        'target': 'DashboardTargetModel',
        'type': 'str'
    }

    attribute_map = {
        'built_in': 'builtIn',
        'datasource': 'datasource',
        'enable': 'enable',
        'hide': 'hide',
        'icon_color': 'iconColor',
        'name': 'name',
        'raw_query': 'rawQuery',
        'show_in': 'showIn',
        'target': 'target',
        'type': 'type'
    }

    def __init__(self, built_in=None, datasource=None, enable=True, hide=False, icon_color=None, name=None, raw_query=None, show_in=None, target=None, type='dashboard', _configuration=None):  # noqa: E501
        """DashboardAnnotationQueryModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._built_in = None
        self._datasource = None
        self._enable = None
        self._hide = None
        self._icon_color = None
        self._name = None
        self._raw_query = None
        self._show_in = None
        self._target = None
        self._type = None
        self.discriminator = None

        self.built_in = built_in
        self.datasource = datasource
        self.enable = enable
        if hide is not None:
            self.hide = hide
        if icon_color is not None:
            self.icon_color = icon_color
        if name is not None:
            self.name = name
        if raw_query is not None:
            self.raw_query = raw_query
        self.show_in = show_in
        if target is not None:
            self.target = target
        self.type = type

    @property
    def built_in(self):
        """Gets the built_in of this DashboardAnnotationQueryModel.  # noqa: E501


        :return: The built_in of this DashboardAnnotationQueryModel.  # noqa: E501
        :rtype: int
        """
        return self._built_in

    @built_in.setter
    def built_in(self, built_in):
        """Sets the built_in of this DashboardAnnotationQueryModel.


        :param built_in: The built_in of this DashboardAnnotationQueryModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and built_in is None:
            raise ValueError("Invalid value for `built_in`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                built_in is not None and built_in > 255):  # noqa: E501
            raise ValueError("Invalid value for `built_in`, must be a value less than or equal to `255`")  # noqa: E501

        self._built_in = built_in

    @property
    def datasource(self):
        """Gets the datasource of this DashboardAnnotationQueryModel.  # noqa: E501


        :return: The datasource of this DashboardAnnotationQueryModel.  # noqa: E501
        :rtype: DashboardAnnotationQueryDatasourceModel
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource):
        """Sets the datasource of this DashboardAnnotationQueryModel.


        :param datasource: The datasource of this DashboardAnnotationQueryModel.  # noqa: E501
        :type: DashboardAnnotationQueryDatasourceModel
        """
        if self._configuration.client_side_validation and datasource is None:
            raise ValueError("Invalid value for `datasource`, must not be `None`")  # noqa: E501

        self._datasource = datasource

    @property
    def enable(self):
        """Gets the enable of this DashboardAnnotationQueryModel.  # noqa: E501

        Whether annotation is enabled.  # noqa: E501

        :return: The enable of this DashboardAnnotationQueryModel.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this DashboardAnnotationQueryModel.

        Whether annotation is enabled.  # noqa: E501

        :param enable: The enable of this DashboardAnnotationQueryModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and enable is None:
            raise ValueError("Invalid value for `enable`, must not be `None`")  # noqa: E501

        self._enable = enable

    @property
    def hide(self):
        """Gets the hide of this DashboardAnnotationQueryModel.  # noqa: E501

        Whether to hide annotation.  # noqa: E501

        :return: The hide of this DashboardAnnotationQueryModel.  # noqa: E501
        :rtype: bool
        """
        return self._hide

    @hide.setter
    def hide(self, hide):
        """Sets the hide of this DashboardAnnotationQueryModel.

        Whether to hide annotation.  # noqa: E501

        :param hide: The hide of this DashboardAnnotationQueryModel.  # noqa: E501
        :type: bool
        """

        self._hide = hide

    @property
    def icon_color(self):
        """Gets the icon_color of this DashboardAnnotationQueryModel.  # noqa: E501

        Annotation icon color.  # noqa: E501

        :return: The icon_color of this DashboardAnnotationQueryModel.  # noqa: E501
        :rtype: str
        """
        return self._icon_color

    @icon_color.setter
    def icon_color(self, icon_color):
        """Sets the icon_color of this DashboardAnnotationQueryModel.

        Annotation icon color.  # noqa: E501

        :param icon_color: The icon_color of this DashboardAnnotationQueryModel.  # noqa: E501
        :type: str
        """

        self._icon_color = icon_color

    @property
    def name(self):
        """Gets the name of this DashboardAnnotationQueryModel.  # noqa: E501

        Name of annotation.  # noqa: E501

        :return: The name of this DashboardAnnotationQueryModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DashboardAnnotationQueryModel.

        Name of annotation.  # noqa: E501

        :param name: The name of this DashboardAnnotationQueryModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def raw_query(self):
        """Gets the raw_query of this DashboardAnnotationQueryModel.  # noqa: E501

        Query for annotation data.  # noqa: E501

        :return: The raw_query of this DashboardAnnotationQueryModel.  # noqa: E501
        :rtype: str
        """
        return self._raw_query

    @raw_query.setter
    def raw_query(self, raw_query):
        """Sets the raw_query of this DashboardAnnotationQueryModel.

        Query for annotation data.  # noqa: E501

        :param raw_query: The raw_query of this DashboardAnnotationQueryModel.  # noqa: E501
        :type: str
        """

        self._raw_query = raw_query

    @property
    def show_in(self):
        """Gets the show_in of this DashboardAnnotationQueryModel.  # noqa: E501


        :return: The show_in of this DashboardAnnotationQueryModel.  # noqa: E501
        :rtype: int
        """
        return self._show_in

    @show_in.setter
    def show_in(self, show_in):
        """Sets the show_in of this DashboardAnnotationQueryModel.


        :param show_in: The show_in of this DashboardAnnotationQueryModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and show_in is None:
            raise ValueError("Invalid value for `show_in`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                show_in is not None and show_in > 255):  # noqa: E501
            raise ValueError("Invalid value for `show_in`, must be a value less than or equal to `255`")  # noqa: E501

        self._show_in = show_in

    @property
    def target(self):
        """Gets the target of this DashboardAnnotationQueryModel.  # noqa: E501


        :return: The target of this DashboardAnnotationQueryModel.  # noqa: E501
        :rtype: DashboardTargetModel
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this DashboardAnnotationQueryModel.


        :param target: The target of this DashboardAnnotationQueryModel.  # noqa: E501
        :type: DashboardTargetModel
        """

        self._target = target

    @property
    def type(self):
        """Gets the type of this DashboardAnnotationQueryModel.  # noqa: E501


        :return: The type of this DashboardAnnotationQueryModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DashboardAnnotationQueryModel.


        :param type: The type of this DashboardAnnotationQueryModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardAnnotationQueryModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardAnnotationQueryModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DashboardAnnotationQueryModel):
            return True

        return self.to_dict() != other.to_dict()
