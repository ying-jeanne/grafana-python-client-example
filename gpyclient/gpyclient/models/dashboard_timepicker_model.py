# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from gpyclient.configuration import Configuration


class DashboardTimepickerModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collapse': 'bool',
        'enable': 'bool',
        'hidden': 'bool',
        'refresh_intervals': 'list[str]'
    }

    attribute_map = {
        'collapse': 'collapse',
        'enable': 'enable',
        'hidden': 'hidden',
        'refresh_intervals': 'refresh_intervals'
    }

    def __init__(self, collapse=False, enable=True, hidden=False, refresh_intervals=None, _configuration=None):  # noqa: E501
        """DashboardTimepickerModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._collapse = None
        self._enable = None
        self._hidden = None
        self._refresh_intervals = None
        self.discriminator = None

        self.collapse = collapse
        self.enable = enable
        self.hidden = hidden
        self.refresh_intervals = refresh_intervals

    @property
    def collapse(self):
        """Gets the collapse of this DashboardTimepickerModel.  # noqa: E501

        Whether timepicker is collapsed or not.  # noqa: E501

        :return: The collapse of this DashboardTimepickerModel.  # noqa: E501
        :rtype: bool
        """
        return self._collapse

    @collapse.setter
    def collapse(self, collapse):
        """Sets the collapse of this DashboardTimepickerModel.

        Whether timepicker is collapsed or not.  # noqa: E501

        :param collapse: The collapse of this DashboardTimepickerModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and collapse is None:
            raise ValueError("Invalid value for `collapse`, must not be `None`")  # noqa: E501

        self._collapse = collapse

    @property
    def enable(self):
        """Gets the enable of this DashboardTimepickerModel.  # noqa: E501

        Whether timepicker is enabled or not.  # noqa: E501

        :return: The enable of this DashboardTimepickerModel.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this DashboardTimepickerModel.

        Whether timepicker is enabled or not.  # noqa: E501

        :param enable: The enable of this DashboardTimepickerModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and enable is None:
            raise ValueError("Invalid value for `enable`, must not be `None`")  # noqa: E501

        self._enable = enable

    @property
    def hidden(self):
        """Gets the hidden of this DashboardTimepickerModel.  # noqa: E501

        Whether timepicker is visible or not.  # noqa: E501

        :return: The hidden of this DashboardTimepickerModel.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this DashboardTimepickerModel.

        Whether timepicker is visible or not.  # noqa: E501

        :param hidden: The hidden of this DashboardTimepickerModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and hidden is None:
            raise ValueError("Invalid value for `hidden`, must not be `None`")  # noqa: E501

        self._hidden = hidden

    @property
    def refresh_intervals(self):
        """Gets the refresh_intervals of this DashboardTimepickerModel.  # noqa: E501

        Selectable intervals for auto-refresh.  # noqa: E501

        :return: The refresh_intervals of this DashboardTimepickerModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._refresh_intervals

    @refresh_intervals.setter
    def refresh_intervals(self, refresh_intervals):
        """Sets the refresh_intervals of this DashboardTimepickerModel.

        Selectable intervals for auto-refresh.  # noqa: E501

        :param refresh_intervals: The refresh_intervals of this DashboardTimepickerModel.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and refresh_intervals is None:
            raise ValueError("Invalid value for `refresh_intervals`, must not be `None`")  # noqa: E501

        self._refresh_intervals = refresh_intervals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardTimepickerModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardTimepickerModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DashboardTimepickerModel):
            return True

        return self.to_dict() != other.to_dict()
