# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from gpyclient.configuration import Configuration


class DashboardRowPanelModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collapsed': 'bool',
        'datasource': 'DashboardRowPanelDatasourceModel',
        'grid_pos': 'DashboardRowPanelGridPosModel',
        'id': 'int',
        'panels': 'list[object]',
        'repeat': 'str',
        'title': 'str',
        'type': 'str'
    }

    attribute_map = {
        'collapsed': 'collapsed',
        'datasource': 'datasource',
        'grid_pos': 'gridPos',
        'id': 'id',
        'panels': 'panels',
        'repeat': 'repeat',
        'title': 'title',
        'type': 'type'
    }

    def __init__(self, collapsed=False, datasource=None, grid_pos=None, id=None, panels=None, repeat=None, title=None, type=None, _configuration=None):  # noqa: E501
        """DashboardRowPanelModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._collapsed = None
        self._datasource = None
        self._grid_pos = None
        self._id = None
        self._panels = None
        self._repeat = None
        self._title = None
        self._type = None
        self.discriminator = None

        self.collapsed = collapsed
        if datasource is not None:
            self.datasource = datasource
        if grid_pos is not None:
            self.grid_pos = grid_pos
        self.id = id
        self.panels = panels
        if repeat is not None:
            self.repeat = repeat
        if title is not None:
            self.title = title
        self.type = type

    @property
    def collapsed(self):
        """Gets the collapsed of this DashboardRowPanelModel.  # noqa: E501


        :return: The collapsed of this DashboardRowPanelModel.  # noqa: E501
        :rtype: bool
        """
        return self._collapsed

    @collapsed.setter
    def collapsed(self, collapsed):
        """Sets the collapsed of this DashboardRowPanelModel.


        :param collapsed: The collapsed of this DashboardRowPanelModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and collapsed is None:
            raise ValueError("Invalid value for `collapsed`, must not be `None`")  # noqa: E501

        self._collapsed = collapsed

    @property
    def datasource(self):
        """Gets the datasource of this DashboardRowPanelModel.  # noqa: E501


        :return: The datasource of this DashboardRowPanelModel.  # noqa: E501
        :rtype: DashboardRowPanelDatasourceModel
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource):
        """Sets the datasource of this DashboardRowPanelModel.


        :param datasource: The datasource of this DashboardRowPanelModel.  # noqa: E501
        :type: DashboardRowPanelDatasourceModel
        """

        self._datasource = datasource

    @property
    def grid_pos(self):
        """Gets the grid_pos of this DashboardRowPanelModel.  # noqa: E501


        :return: The grid_pos of this DashboardRowPanelModel.  # noqa: E501
        :rtype: DashboardRowPanelGridPosModel
        """
        return self._grid_pos

    @grid_pos.setter
    def grid_pos(self, grid_pos):
        """Sets the grid_pos of this DashboardRowPanelModel.


        :param grid_pos: The grid_pos of this DashboardRowPanelModel.  # noqa: E501
        :type: DashboardRowPanelGridPosModel
        """

        self._grid_pos = grid_pos

    @property
    def id(self):
        """Gets the id of this DashboardRowPanelModel.  # noqa: E501


        :return: The id of this DashboardRowPanelModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardRowPanelModel.


        :param id: The id of this DashboardRowPanelModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and id > 4294967295):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `4294967295`")  # noqa: E501

        self._id = id

    @property
    def panels(self):
        """Gets the panels of this DashboardRowPanelModel.  # noqa: E501


        :return: The panels of this DashboardRowPanelModel.  # noqa: E501
        :rtype: list[object]
        """
        return self._panels

    @panels.setter
    def panels(self, panels):
        """Sets the panels of this DashboardRowPanelModel.


        :param panels: The panels of this DashboardRowPanelModel.  # noqa: E501
        :type: list[object]
        """
        if self._configuration.client_side_validation and panels is None:
            raise ValueError("Invalid value for `panels`, must not be `None`")  # noqa: E501

        self._panels = panels

    @property
    def repeat(self):
        """Gets the repeat of this DashboardRowPanelModel.  # noqa: E501

        Name of template variable to repeat for.  # noqa: E501

        :return: The repeat of this DashboardRowPanelModel.  # noqa: E501
        :rtype: str
        """
        return self._repeat

    @repeat.setter
    def repeat(self, repeat):
        """Sets the repeat of this DashboardRowPanelModel.

        Name of template variable to repeat for.  # noqa: E501

        :param repeat: The repeat of this DashboardRowPanelModel.  # noqa: E501
        :type: str
        """

        self._repeat = repeat

    @property
    def title(self):
        """Gets the title of this DashboardRowPanelModel.  # noqa: E501


        :return: The title of this DashboardRowPanelModel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DashboardRowPanelModel.


        :param title: The title of this DashboardRowPanelModel.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this DashboardRowPanelModel.  # noqa: E501


        :return: The type of this DashboardRowPanelModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DashboardRowPanelModel.


        :param type: The type of this DashboardRowPanelModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["row"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardRowPanelModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardRowPanelModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DashboardRowPanelModel):
            return True

        return self.to_dict() != other.to_dict()
