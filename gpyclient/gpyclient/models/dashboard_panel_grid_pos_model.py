# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from gpyclient.configuration import Configuration


class DashboardPanelGridPosModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'h': 'int',
        'static': 'bool',
        'w': 'int',
        'x': 'int',
        'y': 'int'
    }

    attribute_map = {
        'h': 'h',
        'static': 'static',
        'w': 'w',
        'x': 'x',
        'y': 'y'
    }

    def __init__(self, h=None, static=None, w=None, x=None, y=None, _configuration=None):  # noqa: E501
        """DashboardPanelGridPosModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._h = None
        self._static = None
        self._w = None
        self._x = None
        self._y = None
        self.discriminator = None

        self.h = h
        if static is not None:
            self.static = static
        self.w = w
        self.x = x
        self.y = y

    @property
    def h(self):
        """Gets the h of this DashboardPanelGridPosModel.  # noqa: E501

        Panel  # noqa: E501

        :return: The h of this DashboardPanelGridPosModel.  # noqa: E501
        :rtype: int
        """
        return self._h

    @h.setter
    def h(self, h):
        """Sets the h of this DashboardPanelGridPosModel.

        Panel  # noqa: E501

        :param h: The h of this DashboardPanelGridPosModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and h is None:
            raise ValueError("Invalid value for `h`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                h is not None and h > 4294967295):  # noqa: E501
            raise ValueError("Invalid value for `h`, must be a value less than or equal to `4294967295`")  # noqa: E501

        self._h = h

    @property
    def static(self):
        """Gets the static of this DashboardPanelGridPosModel.  # noqa: E501

        true if fixed  # noqa: E501

        :return: The static of this DashboardPanelGridPosModel.  # noqa: E501
        :rtype: bool
        """
        return self._static

    @static.setter
    def static(self, static):
        """Sets the static of this DashboardPanelGridPosModel.

        true if fixed  # noqa: E501

        :param static: The static of this DashboardPanelGridPosModel.  # noqa: E501
        :type: bool
        """

        self._static = static

    @property
    def w(self):
        """Gets the w of this DashboardPanelGridPosModel.  # noqa: E501

        Panel  # noqa: E501

        :return: The w of this DashboardPanelGridPosModel.  # noqa: E501
        :rtype: int
        """
        return self._w

    @w.setter
    def w(self, w):
        """Sets the w of this DashboardPanelGridPosModel.

        Panel  # noqa: E501

        :param w: The w of this DashboardPanelGridPosModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and w is None:
            raise ValueError("Invalid value for `w`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                w is not None and w > 24):  # noqa: E501
            raise ValueError("Invalid value for `w`, must be a value less than or equal to `24`")  # noqa: E501

        self._w = w

    @property
    def x(self):
        """Gets the x of this DashboardPanelGridPosModel.  # noqa: E501

        Panel x  # noqa: E501

        :return: The x of this DashboardPanelGridPosModel.  # noqa: E501
        :rtype: int
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this DashboardPanelGridPosModel.

        Panel x  # noqa: E501

        :param x: The x of this DashboardPanelGridPosModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                x is not None and x >= 24):  # noqa: E501
            raise ValueError("Invalid value for `x`, must be a value less than `24`")  # noqa: E501

        self._x = x

    @property
    def y(self):
        """Gets the y of this DashboardPanelGridPosModel.  # noqa: E501

        Panel y  # noqa: E501

        :return: The y of this DashboardPanelGridPosModel.  # noqa: E501
        :rtype: int
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this DashboardPanelGridPosModel.

        Panel y  # noqa: E501

        :param y: The y of this DashboardPanelGridPosModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                y is not None and y > 4294967295):  # noqa: E501
            raise ValueError("Invalid value for `y`, must be a value less than or equal to `4294967295`")  # noqa: E501

        self._y = y

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardPanelGridPosModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardPanelGridPosModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DashboardPanelGridPosModel):
            return True

        return self.to_dict() != other.to_dict()
