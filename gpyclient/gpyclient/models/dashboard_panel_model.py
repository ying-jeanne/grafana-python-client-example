# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from gpyclient.configuration import Configuration


class DashboardPanelModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'datasource': 'DashboardPanelDatasourceModel',
        'description': 'str',
        'field_config': 'DashboardPanelFieldConfigModel',
        'grid_pos': 'DashboardPanelGridPosModel',
        'id': 'int',
        'interval': 'str',
        'links': 'list[DashboardDashboardLinkModel]',
        'max_data_points': 'float',
        'options': 'object',
        'plugin_version': 'str',
        'repeat': 'str',
        'repeat_direction': 'str',
        'tags': 'list[str]',
        'targets': 'list[DashboardTargetModel]',
        'thresholds': 'list[object]',
        'time_from': 'str',
        'time_regions': 'list[object]',
        'time_shift': 'str',
        'title': 'str',
        'transformations': 'list[DashboardPanelTransformationsModel]',
        'transparent': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'datasource': 'datasource',
        'description': 'description',
        'field_config': 'fieldConfig',
        'grid_pos': 'gridPos',
        'id': 'id',
        'interval': 'interval',
        'links': 'links',
        'max_data_points': 'maxDataPoints',
        'options': 'options',
        'plugin_version': 'pluginVersion',
        'repeat': 'repeat',
        'repeat_direction': 'repeatDirection',
        'tags': 'tags',
        'targets': 'targets',
        'thresholds': 'thresholds',
        'time_from': 'timeFrom',
        'time_regions': 'timeRegions',
        'time_shift': 'timeShift',
        'title': 'title',
        'transformations': 'transformations',
        'transparent': 'transparent',
        'type': 'type'
    }

    def __init__(self, datasource=None, description=None, field_config=None, grid_pos=None, id=None, interval=None, links=None, max_data_points=None, options=None, plugin_version=None, repeat=None, repeat_direction='h', tags=None, targets=None, thresholds=None, time_from=None, time_regions=None, time_shift=None, title=None, transformations=None, transparent=False, type=None, _configuration=None):  # noqa: E501
        """DashboardPanelModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._datasource = None
        self._description = None
        self._field_config = None
        self._grid_pos = None
        self._id = None
        self._interval = None
        self._links = None
        self._max_data_points = None
        self._options = None
        self._plugin_version = None
        self._repeat = None
        self._repeat_direction = None
        self._tags = None
        self._targets = None
        self._thresholds = None
        self._time_from = None
        self._time_regions = None
        self._time_shift = None
        self._title = None
        self._transformations = None
        self._transparent = None
        self._type = None
        self.discriminator = None

        if datasource is not None:
            self.datasource = datasource
        if description is not None:
            self.description = description
        self.field_config = field_config
        if grid_pos is not None:
            self.grid_pos = grid_pos
        if id is not None:
            self.id = id
        if interval is not None:
            self.interval = interval
        if links is not None:
            self.links = links
        if max_data_points is not None:
            self.max_data_points = max_data_points
        self.options = options
        if plugin_version is not None:
            self.plugin_version = plugin_version
        if repeat is not None:
            self.repeat = repeat
        self.repeat_direction = repeat_direction
        if tags is not None:
            self.tags = tags
        if targets is not None:
            self.targets = targets
        if thresholds is not None:
            self.thresholds = thresholds
        if time_from is not None:
            self.time_from = time_from
        if time_regions is not None:
            self.time_regions = time_regions
        if time_shift is not None:
            self.time_shift = time_shift
        if title is not None:
            self.title = title
        self.transformations = transformations
        self.transparent = transparent
        self.type = type

    @property
    def datasource(self):
        """Gets the datasource of this DashboardPanelModel.  # noqa: E501


        :return: The datasource of this DashboardPanelModel.  # noqa: E501
        :rtype: DashboardPanelDatasourceModel
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource):
        """Sets the datasource of this DashboardPanelModel.


        :param datasource: The datasource of this DashboardPanelModel.  # noqa: E501
        :type: DashboardPanelDatasourceModel
        """

        self._datasource = datasource

    @property
    def description(self):
        """Gets the description of this DashboardPanelModel.  # noqa: E501

        Description.  # noqa: E501

        :return: The description of this DashboardPanelModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DashboardPanelModel.

        Description.  # noqa: E501

        :param description: The description of this DashboardPanelModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def field_config(self):
        """Gets the field_config of this DashboardPanelModel.  # noqa: E501


        :return: The field_config of this DashboardPanelModel.  # noqa: E501
        :rtype: DashboardPanelFieldConfigModel
        """
        return self._field_config

    @field_config.setter
    def field_config(self, field_config):
        """Sets the field_config of this DashboardPanelModel.


        :param field_config: The field_config of this DashboardPanelModel.  # noqa: E501
        :type: DashboardPanelFieldConfigModel
        """
        if self._configuration.client_side_validation and field_config is None:
            raise ValueError("Invalid value for `field_config`, must not be `None`")  # noqa: E501

        self._field_config = field_config

    @property
    def grid_pos(self):
        """Gets the grid_pos of this DashboardPanelModel.  # noqa: E501


        :return: The grid_pos of this DashboardPanelModel.  # noqa: E501
        :rtype: DashboardPanelGridPosModel
        """
        return self._grid_pos

    @grid_pos.setter
    def grid_pos(self, grid_pos):
        """Sets the grid_pos of this DashboardPanelModel.


        :param grid_pos: The grid_pos of this DashboardPanelModel.  # noqa: E501
        :type: DashboardPanelGridPosModel
        """

        self._grid_pos = grid_pos

    @property
    def id(self):
        """Gets the id of this DashboardPanelModel.  # noqa: E501

        TODO docs  # noqa: E501

        :return: The id of this DashboardPanelModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardPanelModel.

        TODO docs  # noqa: E501

        :param id: The id of this DashboardPanelModel.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                id is not None and id > 4294967295):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `4294967295`")  # noqa: E501

        self._id = id

    @property
    def interval(self):
        """Gets the interval of this DashboardPanelModel.  # noqa: E501

        TODO docs TODO tighter constraint  # noqa: E501

        :return: The interval of this DashboardPanelModel.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this DashboardPanelModel.

        TODO docs TODO tighter constraint  # noqa: E501

        :param interval: The interval of this DashboardPanelModel.  # noqa: E501
        :type: str
        """

        self._interval = interval

    @property
    def links(self):
        """Gets the links of this DashboardPanelModel.  # noqa: E501

        Panel links. TODO fill this out - seems there are a couple variants?  # noqa: E501

        :return: The links of this DashboardPanelModel.  # noqa: E501
        :rtype: list[DashboardDashboardLinkModel]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DashboardPanelModel.

        Panel links. TODO fill this out - seems there are a couple variants?  # noqa: E501

        :param links: The links of this DashboardPanelModel.  # noqa: E501
        :type: list[DashboardDashboardLinkModel]
        """

        self._links = links

    @property
    def max_data_points(self):
        """Gets the max_data_points of this DashboardPanelModel.  # noqa: E501

        TODO docs  # noqa: E501

        :return: The max_data_points of this DashboardPanelModel.  # noqa: E501
        :rtype: float
        """
        return self._max_data_points

    @max_data_points.setter
    def max_data_points(self, max_data_points):
        """Sets the max_data_points of this DashboardPanelModel.

        TODO docs  # noqa: E501

        :param max_data_points: The max_data_points of this DashboardPanelModel.  # noqa: E501
        :type: float
        """

        self._max_data_points = max_data_points

    @property
    def options(self):
        """Gets the options of this DashboardPanelModel.  # noqa: E501

        options is specified by the PanelOptions field in panel plugin schemas.  # noqa: E501

        :return: The options of this DashboardPanelModel.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this DashboardPanelModel.

        options is specified by the PanelOptions field in panel plugin schemas.  # noqa: E501

        :param options: The options of this DashboardPanelModel.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")  # noqa: E501

        self._options = options

    @property
    def plugin_version(self):
        """Gets the plugin_version of this DashboardPanelModel.  # noqa: E501

        FIXME this almost certainly has to be changed in favor of scuemata versions  # noqa: E501

        :return: The plugin_version of this DashboardPanelModel.  # noqa: E501
        :rtype: str
        """
        return self._plugin_version

    @plugin_version.setter
    def plugin_version(self, plugin_version):
        """Sets the plugin_version of this DashboardPanelModel.

        FIXME this almost certainly has to be changed in favor of scuemata versions  # noqa: E501

        :param plugin_version: The plugin_version of this DashboardPanelModel.  # noqa: E501
        :type: str
        """

        self._plugin_version = plugin_version

    @property
    def repeat(self):
        """Gets the repeat of this DashboardPanelModel.  # noqa: E501

        Name of template variable to repeat for.  # noqa: E501

        :return: The repeat of this DashboardPanelModel.  # noqa: E501
        :rtype: str
        """
        return self._repeat

    @repeat.setter
    def repeat(self, repeat):
        """Sets the repeat of this DashboardPanelModel.

        Name of template variable to repeat for.  # noqa: E501

        :param repeat: The repeat of this DashboardPanelModel.  # noqa: E501
        :type: str
        """

        self._repeat = repeat

    @property
    def repeat_direction(self):
        """Gets the repeat_direction of this DashboardPanelModel.  # noqa: E501

        Direction to repeat in if 'repeat' is set. \"h\" for horizontal, \"v\" for vertical.  # noqa: E501

        :return: The repeat_direction of this DashboardPanelModel.  # noqa: E501
        :rtype: str
        """
        return self._repeat_direction

    @repeat_direction.setter
    def repeat_direction(self, repeat_direction):
        """Sets the repeat_direction of this DashboardPanelModel.

        Direction to repeat in if 'repeat' is set. \"h\" for horizontal, \"v\" for vertical.  # noqa: E501

        :param repeat_direction: The repeat_direction of this DashboardPanelModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and repeat_direction is None:
            raise ValueError("Invalid value for `repeat_direction`, must not be `None`")  # noqa: E501
        allowed_values = ["h", "v"]  # noqa: E501
        if (self._configuration.client_side_validation and
                repeat_direction not in allowed_values):
            raise ValueError(
                "Invalid value for `repeat_direction` ({0}), must be one of {1}"  # noqa: E501
                .format(repeat_direction, allowed_values)
            )

        self._repeat_direction = repeat_direction

    @property
    def tags(self):
        """Gets the tags of this DashboardPanelModel.  # noqa: E501

        TODO docs  # noqa: E501

        :return: The tags of this DashboardPanelModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DashboardPanelModel.

        TODO docs  # noqa: E501

        :param tags: The tags of this DashboardPanelModel.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def targets(self):
        """Gets the targets of this DashboardPanelModel.  # noqa: E501

        TODO docs  # noqa: E501

        :return: The targets of this DashboardPanelModel.  # noqa: E501
        :rtype: list[DashboardTargetModel]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this DashboardPanelModel.

        TODO docs  # noqa: E501

        :param targets: The targets of this DashboardPanelModel.  # noqa: E501
        :type: list[DashboardTargetModel]
        """

        self._targets = targets

    @property
    def thresholds(self):
        """Gets the thresholds of this DashboardPanelModel.  # noqa: E501

        TODO docs  # noqa: E501

        :return: The thresholds of this DashboardPanelModel.  # noqa: E501
        :rtype: list[object]
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """Sets the thresholds of this DashboardPanelModel.

        TODO docs  # noqa: E501

        :param thresholds: The thresholds of this DashboardPanelModel.  # noqa: E501
        :type: list[object]
        """

        self._thresholds = thresholds

    @property
    def time_from(self):
        """Gets the time_from of this DashboardPanelModel.  # noqa: E501

        TODO docs TODO tighter constraint  # noqa: E501

        :return: The time_from of this DashboardPanelModel.  # noqa: E501
        :rtype: str
        """
        return self._time_from

    @time_from.setter
    def time_from(self, time_from):
        """Sets the time_from of this DashboardPanelModel.

        TODO docs TODO tighter constraint  # noqa: E501

        :param time_from: The time_from of this DashboardPanelModel.  # noqa: E501
        :type: str
        """

        self._time_from = time_from

    @property
    def time_regions(self):
        """Gets the time_regions of this DashboardPanelModel.  # noqa: E501

        TODO docs  # noqa: E501

        :return: The time_regions of this DashboardPanelModel.  # noqa: E501
        :rtype: list[object]
        """
        return self._time_regions

    @time_regions.setter
    def time_regions(self, time_regions):
        """Sets the time_regions of this DashboardPanelModel.

        TODO docs  # noqa: E501

        :param time_regions: The time_regions of this DashboardPanelModel.  # noqa: E501
        :type: list[object]
        """

        self._time_regions = time_regions

    @property
    def time_shift(self):
        """Gets the time_shift of this DashboardPanelModel.  # noqa: E501

        TODO docs TODO tighter constraint  # noqa: E501

        :return: The time_shift of this DashboardPanelModel.  # noqa: E501
        :rtype: str
        """
        return self._time_shift

    @time_shift.setter
    def time_shift(self, time_shift):
        """Sets the time_shift of this DashboardPanelModel.

        TODO docs TODO tighter constraint  # noqa: E501

        :param time_shift: The time_shift of this DashboardPanelModel.  # noqa: E501
        :type: str
        """

        self._time_shift = time_shift

    @property
    def title(self):
        """Gets the title of this DashboardPanelModel.  # noqa: E501

        Panel title.  # noqa: E501

        :return: The title of this DashboardPanelModel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DashboardPanelModel.

        Panel title.  # noqa: E501

        :param title: The title of this DashboardPanelModel.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def transformations(self):
        """Gets the transformations of this DashboardPanelModel.  # noqa: E501


        :return: The transformations of this DashboardPanelModel.  # noqa: E501
        :rtype: list[DashboardPanelTransformationsModel]
        """
        return self._transformations

    @transformations.setter
    def transformations(self, transformations):
        """Sets the transformations of this DashboardPanelModel.


        :param transformations: The transformations of this DashboardPanelModel.  # noqa: E501
        :type: list[DashboardPanelTransformationsModel]
        """
        if self._configuration.client_side_validation and transformations is None:
            raise ValueError("Invalid value for `transformations`, must not be `None`")  # noqa: E501

        self._transformations = transformations

    @property
    def transparent(self):
        """Gets the transparent of this DashboardPanelModel.  # noqa: E501

        Whether to display the panel without a background.  # noqa: E501

        :return: The transparent of this DashboardPanelModel.  # noqa: E501
        :rtype: bool
        """
        return self._transparent

    @transparent.setter
    def transparent(self, transparent):
        """Sets the transparent of this DashboardPanelModel.

        Whether to display the panel without a background.  # noqa: E501

        :param transparent: The transparent of this DashboardPanelModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and transparent is None:
            raise ValueError("Invalid value for `transparent`, must not be `None`")  # noqa: E501

        self._transparent = transparent

    @property
    def type(self):
        """Gets the type of this DashboardPanelModel.  # noqa: E501

        The panel plugin type id. May not be empty.  # noqa: E501

        :return: The type of this DashboardPanelModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DashboardPanelModel.

        The panel plugin type id. May not be empty.  # noqa: E501

        :param type: The type of this DashboardPanelModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                type is not None and len(type) < 1):
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardPanelModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardPanelModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DashboardPanelModel):
            return True

        return self.to_dict() != other.to_dict()
