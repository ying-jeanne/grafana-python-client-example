# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from gpyclient.configuration import Configuration


class DashboardDashboardLinkModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'as_dropdown': 'bool',
        'icon': 'str',
        'include_vars': 'bool',
        'keep_time': 'bool',
        'tags': 'list[str]',
        'target_blank': 'bool',
        'title': 'str',
        'tooltip': 'str',
        'type': 'str',
        'url': 'str'
    }

    attribute_map = {
        'as_dropdown': 'asDropdown',
        'icon': 'icon',
        'include_vars': 'includeVars',
        'keep_time': 'keepTime',
        'tags': 'tags',
        'target_blank': 'targetBlank',
        'title': 'title',
        'tooltip': 'tooltip',
        'type': 'type',
        'url': 'url'
    }

    def __init__(self, as_dropdown=False, icon=None, include_vars=False, keep_time=False, tags=None, target_blank=False, title=None, tooltip=None, type=None, url=None, _configuration=None):  # noqa: E501
        """DashboardDashboardLinkModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._as_dropdown = None
        self._icon = None
        self._include_vars = None
        self._keep_time = None
        self._tags = None
        self._target_blank = None
        self._title = None
        self._tooltip = None
        self._type = None
        self._url = None
        self.discriminator = None

        self.as_dropdown = as_dropdown
        if icon is not None:
            self.icon = icon
        self.include_vars = include_vars
        self.keep_time = keep_time
        self.tags = tags
        self.target_blank = target_blank
        self.title = title
        if tooltip is not None:
            self.tooltip = tooltip
        self.type = type
        if url is not None:
            self.url = url

    @property
    def as_dropdown(self):
        """Gets the as_dropdown of this DashboardDashboardLinkModel.  # noqa: E501


        :return: The as_dropdown of this DashboardDashboardLinkModel.  # noqa: E501
        :rtype: bool
        """
        return self._as_dropdown

    @as_dropdown.setter
    def as_dropdown(self, as_dropdown):
        """Sets the as_dropdown of this DashboardDashboardLinkModel.


        :param as_dropdown: The as_dropdown of this DashboardDashboardLinkModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and as_dropdown is None:
            raise ValueError("Invalid value for `as_dropdown`, must not be `None`")  # noqa: E501

        self._as_dropdown = as_dropdown

    @property
    def icon(self):
        """Gets the icon of this DashboardDashboardLinkModel.  # noqa: E501


        :return: The icon of this DashboardDashboardLinkModel.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this DashboardDashboardLinkModel.


        :param icon: The icon of this DashboardDashboardLinkModel.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def include_vars(self):
        """Gets the include_vars of this DashboardDashboardLinkModel.  # noqa: E501


        :return: The include_vars of this DashboardDashboardLinkModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_vars

    @include_vars.setter
    def include_vars(self, include_vars):
        """Sets the include_vars of this DashboardDashboardLinkModel.


        :param include_vars: The include_vars of this DashboardDashboardLinkModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and include_vars is None:
            raise ValueError("Invalid value for `include_vars`, must not be `None`")  # noqa: E501

        self._include_vars = include_vars

    @property
    def keep_time(self):
        """Gets the keep_time of this DashboardDashboardLinkModel.  # noqa: E501


        :return: The keep_time of this DashboardDashboardLinkModel.  # noqa: E501
        :rtype: bool
        """
        return self._keep_time

    @keep_time.setter
    def keep_time(self, keep_time):
        """Sets the keep_time of this DashboardDashboardLinkModel.


        :param keep_time: The keep_time of this DashboardDashboardLinkModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and keep_time is None:
            raise ValueError("Invalid value for `keep_time`, must not be `None`")  # noqa: E501

        self._keep_time = keep_time

    @property
    def tags(self):
        """Gets the tags of this DashboardDashboardLinkModel.  # noqa: E501


        :return: The tags of this DashboardDashboardLinkModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DashboardDashboardLinkModel.


        :param tags: The tags of this DashboardDashboardLinkModel.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def target_blank(self):
        """Gets the target_blank of this DashboardDashboardLinkModel.  # noqa: E501


        :return: The target_blank of this DashboardDashboardLinkModel.  # noqa: E501
        :rtype: bool
        """
        return self._target_blank

    @target_blank.setter
    def target_blank(self, target_blank):
        """Sets the target_blank of this DashboardDashboardLinkModel.


        :param target_blank: The target_blank of this DashboardDashboardLinkModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and target_blank is None:
            raise ValueError("Invalid value for `target_blank`, must not be `None`")  # noqa: E501

        self._target_blank = target_blank

    @property
    def title(self):
        """Gets the title of this DashboardDashboardLinkModel.  # noqa: E501


        :return: The title of this DashboardDashboardLinkModel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DashboardDashboardLinkModel.


        :param title: The title of this DashboardDashboardLinkModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def tooltip(self):
        """Gets the tooltip of this DashboardDashboardLinkModel.  # noqa: E501


        :return: The tooltip of this DashboardDashboardLinkModel.  # noqa: E501
        :rtype: str
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip):
        """Sets the tooltip of this DashboardDashboardLinkModel.


        :param tooltip: The tooltip of this DashboardDashboardLinkModel.  # noqa: E501
        :type: str
        """

        self._tooltip = tooltip

    @property
    def type(self):
        """Gets the type of this DashboardDashboardLinkModel.  # noqa: E501


        :return: The type of this DashboardDashboardLinkModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DashboardDashboardLinkModel.


        :param type: The type of this DashboardDashboardLinkModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["link", "dashboards"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this DashboardDashboardLinkModel.  # noqa: E501


        :return: The url of this DashboardDashboardLinkModel.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DashboardDashboardLinkModel.


        :param url: The url of this DashboardDashboardLinkModel.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardDashboardLinkModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardDashboardLinkModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DashboardDashboardLinkModel):
            return True

        return self.to_dict() != other.to_dict()
