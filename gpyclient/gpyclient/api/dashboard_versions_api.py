# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from gpyclient.api_client import ApiClient


class DashboardVersionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_dashboard_version(self, dashboard_id, dashboard_version_id, **kwargs):  # noqa: E501
        """Get a specific dashboard version.  # noqa: E501

        Please refer to [updated API](#/dashboard_versions/getDashboardVersionByUID) instead  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboard_version(dashboard_id, dashboard_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int dashboard_id: (required)
        :param int dashboard_version_id: (required)
        :return: DashboardVersionMetaModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dashboard_version_with_http_info(dashboard_id, dashboard_version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dashboard_version_with_http_info(dashboard_id, dashboard_version_id, **kwargs)  # noqa: E501
            return data

    def get_dashboard_version_with_http_info(self, dashboard_id, dashboard_version_id, **kwargs):  # noqa: E501
        """Get a specific dashboard version.  # noqa: E501

        Please refer to [updated API](#/dashboard_versions/getDashboardVersionByUID) instead  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboard_version_with_http_info(dashboard_id, dashboard_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int dashboard_id: (required)
        :param int dashboard_version_id: (required)
        :return: DashboardVersionMetaModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_id', 'dashboard_version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dashboard_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_id' is set
        if self.api_client.client_side_validation and ('dashboard_id' not in params or
                                                       params['dashboard_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dashboard_id` when calling `get_dashboard_version`")  # noqa: E501
        # verify the required parameter 'dashboard_version_id' is set
        if self.api_client.client_side_validation and ('dashboard_version_id' not in params or
                                                       params['dashboard_version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dashboard_version_id` when calling `get_dashboard_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_id' in params:
            path_params['DashboardID'] = params['dashboard_id']  # noqa: E501
        if 'dashboard_version_id' in params:
            path_params['DashboardVersionID'] = params['dashboard_version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/id/{DashboardID}/versions/{DashboardVersionID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardVersionMetaModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dashboard_version_by_uid(self, uid, dashboard_version_id, **kwargs):  # noqa: E501
        """Get a specific dashboard version using UID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboard_version_by_uid(uid, dashboard_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: (required)
        :param int dashboard_version_id: (required)
        :return: DashboardVersionMetaModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dashboard_version_by_uid_with_http_info(uid, dashboard_version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dashboard_version_by_uid_with_http_info(uid, dashboard_version_id, **kwargs)  # noqa: E501
            return data

    def get_dashboard_version_by_uid_with_http_info(self, uid, dashboard_version_id, **kwargs):  # noqa: E501
        """Get a specific dashboard version using UID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboard_version_by_uid_with_http_info(uid, dashboard_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: (required)
        :param int dashboard_version_id: (required)
        :return: DashboardVersionMetaModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid', 'dashboard_version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dashboard_version_by_uid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `get_dashboard_version_by_uid`")  # noqa: E501
        # verify the required parameter 'dashboard_version_id' is set
        if self.api_client.client_side_validation and ('dashboard_version_id' not in params or
                                                       params['dashboard_version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dashboard_version_id` when calling `get_dashboard_version_by_uid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501
        if 'dashboard_version_id' in params:
            path_params['DashboardVersionID'] = params['dashboard_version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/uid/{uid}/versions/{DashboardVersionID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardVersionMetaModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dashboard_versions(self, dashboard_id, **kwargs):  # noqa: E501
        """Gets all existing versions for the dashboard.  # noqa: E501

        Please refer to [updated API](#/dashboard_versions/getDashboardVersionsByUID) instead  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboard_versions(dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int dashboard_id: (required)
        :param int limit: Maximum number of results to return
        :param int start: Version to start from when returning queries
        :return: list[DashboardVersionDTOModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dashboard_versions_with_http_info(dashboard_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dashboard_versions_with_http_info(dashboard_id, **kwargs)  # noqa: E501
            return data

    def get_dashboard_versions_with_http_info(self, dashboard_id, **kwargs):  # noqa: E501
        """Gets all existing versions for the dashboard.  # noqa: E501

        Please refer to [updated API](#/dashboard_versions/getDashboardVersionsByUID) instead  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboard_versions_with_http_info(dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int dashboard_id: (required)
        :param int limit: Maximum number of results to return
        :param int start: Version to start from when returning queries
        :return: list[DashboardVersionDTOModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_id', 'limit', 'start']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dashboard_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_id' is set
        if self.api_client.client_side_validation and ('dashboard_id' not in params or
                                                       params['dashboard_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dashboard_id` when calling `get_dashboard_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_id' in params:
            path_params['DashboardID'] = params['dashboard_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/id/{DashboardID}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DashboardVersionDTOModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dashboard_versions_by_uid(self, uid, **kwargs):  # noqa: E501
        """Gets all existing versions for the dashboard using UID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboard_versions_by_uid(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: (required)
        :param int limit: Maximum number of results to return
        :param int start: Version to start from when returning queries
        :return: list[DashboardVersionDTOModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dashboard_versions_by_uid_with_http_info(uid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dashboard_versions_by_uid_with_http_info(uid, **kwargs)  # noqa: E501
            return data

    def get_dashboard_versions_by_uid_with_http_info(self, uid, **kwargs):  # noqa: E501
        """Gets all existing versions for the dashboard using UID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dashboard_versions_by_uid_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: (required)
        :param int limit: Maximum number of results to return
        :param int start: Version to start from when returning queries
        :return: list[DashboardVersionDTOModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid', 'limit', 'start']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dashboard_versions_by_uid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `get_dashboard_versions_by_uid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/uid/{uid}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DashboardVersionDTOModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_dashboard_version(self, dashboard_id, body, **kwargs):  # noqa: E501
        """Restore a dashboard to a given dashboard version.  # noqa: E501

        Please refer to [updated API](#/dashboard_versions/restoreDashboardVersionByUID) instead  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_dashboard_version(dashboard_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int dashboard_id: (required)
        :param RestoreDashboardVersionCommandModel body: (required)
        :return: InlineResponse2004Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_dashboard_version_with_http_info(dashboard_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_dashboard_version_with_http_info(dashboard_id, body, **kwargs)  # noqa: E501
            return data

    def restore_dashboard_version_with_http_info(self, dashboard_id, body, **kwargs):  # noqa: E501
        """Restore a dashboard to a given dashboard version.  # noqa: E501

        Please refer to [updated API](#/dashboard_versions/restoreDashboardVersionByUID) instead  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_dashboard_version_with_http_info(dashboard_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int dashboard_id: (required)
        :param RestoreDashboardVersionCommandModel body: (required)
        :return: InlineResponse2004Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_dashboard_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_id' is set
        if self.api_client.client_side_validation and ('dashboard_id' not in params or
                                                       params['dashboard_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dashboard_id` when calling `restore_dashboard_version`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `restore_dashboard_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_id' in params:
            path_params['DashboardID'] = params['dashboard_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/id/{DashboardID}/restore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_dashboard_version_by_uid(self, uid, body, **kwargs):  # noqa: E501
        """Restore a dashboard to a given dashboard version using UID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_dashboard_version_by_uid(uid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: (required)
        :param RestoreDashboardVersionCommandModel body: (required)
        :return: InlineResponse2004Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_dashboard_version_by_uid_with_http_info(uid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_dashboard_version_by_uid_with_http_info(uid, body, **kwargs)  # noqa: E501
            return data

    def restore_dashboard_version_by_uid_with_http_info(self, uid, body, **kwargs):  # noqa: E501
        """Restore a dashboard to a given dashboard version using UID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_dashboard_version_by_uid_with_http_info(uid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: (required)
        :param RestoreDashboardVersionCommandModel body: (required)
        :return: InlineResponse2004Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_dashboard_version_by_uid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `restore_dashboard_version_by_uid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `restore_dashboard_version_by_uid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/uid/{uid}/restore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
